---
// src/components/PcbShowcase.astro
import { projectsData } from "../data/projects.js"; // Updated import

// Interface for the structure expected by pcbShowcaseLogic.js and the template
interface PcbModelForShowcase {
    key: string;
    name: string;
    modelPath: string;
    thumbnailUrl: string;
    githubUrl?: string;
    shortDescription?: string; // Added for model-specific description
}

// Filter and transform projectsData for the PCB showcase
const pcbModelsForShowcase: PcbModelForShowcase[] = projectsData
    .filter((project) => project.pcbModelPath) // Get only projects with a pcbModelPath
    .map((project) => ({
        key: project.id,
        name: project.title,
        modelPath: project.pcbModelPath!, // Non-null assertion as we filtered
        thumbnailUrl:
            project.images && project.images.length > 0 && project.images[0].src
                ? project.images[0].src
                : "/images/placeholders/pcb-project-thumb.png", // Fallback thumbnail
        githubUrl: project.link || undefined,
        shortDescription: project.shortDescription || "", // Add shortDescription
    }));

console.log(
    "[Astro SSR] PcbShowcase.astro - pcbModelsForShowcase:",
    pcbModelsForShowcase,
);
const pcbModelsDataJson = JSON.stringify(pcbModelsForShowcase);

// Placeholder for any server-side logic or props needed.
---

<section
    id="pcb-3d-showcase"
    class="artifact-section content-section"
    data-pcb-models={pcbModelsDataJson}
>
    <div class="container">
        <div class="artifact-header stagger-children">
            <h2>3D PCB Showcase</h2>
            <div class="pcb-thumbnail-selector-wrapper">
                <button
                    class="scroll-arrow prev-arrow"
                    aria-label="Previous Model"></button>
                <div class="pcb-thumbnail-selector">
                    {
                        pcbModelsForShowcase.map((model, index) => (
                            <div
                                class="pcb-thumbnail-item"
                                data-model-key={model.key}
                                style={`--animation-order-child: ${index};`}
                            >
                                {model.thumbnailUrl &&
                                model.thumbnailUrl !==
                                    "/images/placeholders/pcb-project-thumb.png" ? (
                                    <img
                                        src={model.thumbnailUrl}
                                        alt={model.name}
                                        loading="lazy"
                                    />
                                ) : (
                                    <div
                                        class="placeholder-thumb-visual"
                                        style={`background-color: hsl(${index * 60}, 70%, 70%)`}
                                    >
                                        {model.name
                                            .substring(0, 1)
                                            .toUpperCase()}
                                    </div>
                                )}
                                <span>{model.name}</span>
                                {/* Link removed from thumbnail item */}
                            </div>
                        ))
                    }
                </div>
                <button class="scroll-arrow next-arrow" aria-label="Next Model"
                    >></button
                >
            </div>
            {/* Meta pills are now moved to the render container below */}
        </div>
        <div id="pcb-3d-render-container">
            {/* Added position: relative here for child positioning */}
            <div id="loading-indicator">Loading 3D Model...</div>
            {/* Canvas for Three.js will be appended here by script */}
            <div class="artifact-meta-pills">
                <span class="meta-pill-label">Rendered with:</span>
                <span class="meta-pill">Three.js</span>
                <span class="meta-pill">WebGL</span>
                <span class="meta-pill">Custom Shaders</span>
            </div>
        </div>
        <div class="artifact-description stagger-children">
            {
                /* Replaced generic paragraph with a dedicated element for dynamic description */
            }
            <p id="pcb-dynamic-description" class="model-specific-description">
                Select a model above to see its description.
            </p>
            <p
                class="pcb-project-link-wrapper"
                style="display: none; margin-top: var(--spacing-s);"
            >
                <a
                    id="pcb-dynamic-link"
                    href="#"
                    target="_blank"
                    rel="noopener noreferrer"
                    class="button"
                >
                    View Project
                </a>
            </p>
        </div>
    </div>
</section>

<!-- No client:* directive, Astro processes scripts from src/ by default -->
<script src="../scripts/pcbShowcaseLogic.js"></script>

<style>
    #pcb-3d-render-container {
        position: relative; /* For positioning meta pills */
        /* Ensure it has a defined height, or the pills might not position correctly if content is sparse */
        min-height: 300px; /* Example minimum height, adjust as needed */
    }

    .artifact-meta-pills {
        position: absolute;
        bottom: var(--spacing-s, 8px); /* Use CSS variable or fallback */
        right: var(--spacing-s, 8px);
        z-index: 10; /* Ensure it's above the canvas if canvas is also positioned */
        background-color: rgba(
            var(--color-background-rgb),
            0.7
        ); /* Optional: slight background for readability */
        padding: var(--spacing-xs, 4px) var(--spacing-s, 8px);
        border-radius: var(--border-radius-small, 4px);
        display: flex; /* To align items inline */
        gap: var(--spacing-xs, 4px); /* Space between pills */
    }

    /* Styles for .placeholder-thumb-visual if not covered globally */
    .placeholder-thumb-visual {
        width: 100%;
        height: 50px; /* Match original .pcb-thumbnail-item img */
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem; /* Larger for single initial */
        font-weight: bold;
        color: white;
        border-radius: calc(
            var(--border-radius-base) - 2px
        ); /* Match original */
        margin-bottom: var(--spacing-xs); /* Match original */
    }

    .pcb-thumbnail-item {
        /* Ensure it can contain positioned children if needed, though not strictly for this link */
        /* position: relative; */
        /* Making sure the item itself doesn't grow too large if content pushes it */
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .pcb-github-link {
        display: inline-block;
        margin-top: 4px;
        color: var(--color-foreground-muted);
        text-decoration: none;
        line-height: 1;
    }

    .pcb-github-link:hover {
        color: var(--color-accent-primary);
    }

    .pcb-github-link .material-symbols-rounded {
        font-size: 1rem;
        vertical-align: middle;
    }

    .pcb-thumbnail-selector.is-centered {
        justify-content: center;
    }

    /* Class to hide elements, controlled by JS */
    .pcb-thumbnail-selector-wrapper .scroll-arrow.hidden,
    .pcb-thumbnail-selector-wrapper.no-scroll-fades::before,
    .pcb-thumbnail-selector-wrapper.no-scroll-fades::after {
        display: none !important; /* Important to override other display styles if necessary */
        opacity: 0 !important; /* Ensure fades are also gone */
    }
</style>
